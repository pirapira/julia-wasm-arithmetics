function addu256(x:u256, y:u256) -> (result:u256, carry:bool)
{
  let carry:bool := false
  let x1:u64, x2:u64, x3:u64, x4:u64 := split256(x)
  let y1:u64, y2:u64, y3:u64, y4:u64 := split256(y)

  let r1 := addu64(x1, y1)
  carry := ltu64(r1, x1)
  // add the carry bit
  let r2 := addu64(x2, booltou64(carry))
  carry := ltu64(r2, x2)

  // x2 + y2
  r2 := addu64(r2, y2)
  carry :=  ltu64(r2, y2)

  // add the carry bit
  let r3 := addu64(x3, booltou64(carry))
  carry := ltu64(r3, x3)

  // x3 + y3
  r3 := addu64(r3, y3)
  carry :=  ltu64(r3, y3)

  // add the carry bit
  let r4 := addu64(x4, booltou64(carry))
  carry := ltu64(r4, x4)
  // x4 + y4
  r4 := addu64(r4, y4)

  carry :=  ltu64(r4, y4)
  result := combine256(r1, r2, r3, r4)
}
